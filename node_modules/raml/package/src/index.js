// Generated by CoffeeScript 1.8.0
(function() {
  var PORT, app, args, express, file, file_or_url_to_absolute, fs, launch_webapp, launch_webapp_once, nok, ok, path, pkg, program, raml_parser, request, spawn, starts_with, webapp_is_listening;

  express = require('express');

  path = require('path');

  program = require('commander');

  spawn = require('child_process').spawn;

  request = require('request');

  pkg = require(path.resolve(__dirname, '../package.json'));

  fs = require('fs');

  raml_parser = require('raml-parser');

  app = express();

  PORT = 10500;

  starts_with = function(str, search) {
    return 0 === str.indexOf(search);
  };

  file_or_url_to_absolute = function(file) {
    if (starts_with(file, 'http:') || starts_with(file, 'https:')) {
      return file;
    } else {
      return path.resolve(process.cwd(), file);
    }
  };

  launch_webapp = function(port, cb) {
    app.get('/', function(req, res) {
      var html, raml_url;
      raml_url = req.query.url;
      html = "<html>\n<head>\n    <link rel=\"stylesheet\" href=\"/api-console/styles/app.css\" type=\"text/css\" />\n</head>\n<body ng-app=\"ramlConsoleApp\" ng-cloak id=\"raml-console-unembedded\">\n    <script src=\"/api-console/scripts/vendor.js\"></script>\n    <script src=\"/api-console/scripts/app.js\"></script>\n    <div style=\"overflow: auto; position: relative\">\n        <raml-console src=\"" + raml_url + "\"/>\n    </div>\n</body>\n</html>";
      return res.send(html);
    });
    app.use('/api-console', express["static"](path.resolve(__dirname, '../api-console/dist')));
    app.use('/api-designer', express["static"](path.resolve(__dirname, '../api-designer/dist')));
    app.get('/~raml-is', function(req, res) {
      return res.send('awesome');
    });
    app.use('/', express["static"]('/'));
    return app.listen(port, cb);
  };

  webapp_is_listening = function(port, cb) {
    return request("http://localhost:" + port + "/~raml-is", function(e, r, b) {
      return cb(null, b === 'awesome');
    });
  };

  launch_webapp_once = function(port, cb) {
    return webapp_is_listening(port, function(e, r) {
      if (r) {
        return cb();
      } else {
        return launch_webapp(port, cb);
      }
    });
  };

  args = process.argv.slice(2);

  if (args.length !== 2) {
    console.log('usage: raml console {file or url}');
    process.exit();
  }

  switch (args[0]) {
    case 'console':
      launch_webapp_once(PORT, function() {
        var file;
        file = file_or_url_to_absolute(args[1]);
        return spawn('open', [("http://localhost:" + PORT + "/?url=") + encodeURIComponent(file)]);
      });
      break;
    case 'edit':
      null;
      break;
    case 'validate':
      file = file_or_url_to_absolute(args[1]);
      nok = function(err) {
        return console.error(JSON.stringify(err, null, 2));
      };
      ok = function(node) {
        return console.log("Successfully parsed RAML");
      };
      raml_parser.composeFile(file).then(ok, nok);
  }


  /*
  program
    .version(pkg.version)
    .option('-p, --port <port>', 'Port (defaults to 10556)', parseInt)
    .parse(process.argv)
  port = program.port or 10556
   */

}).call(this);
